"""autogenerated by genpy from osuar_telepilot/wall_request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class wall_request(genpy.Message):
  _md5sum = "b1015ce8f062878c46b7b51bae21b79f"
  _type = "osuar_telepilot/wall_request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 distance
int8 p
int8 d
int8 i
int16 target
char status

"""
  __slots__ = ['distance','p','d','i','target','status']
  _slot_types = ['int16','int8','int8','int8','int16','char']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       distance,p,d,i,target,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(wall_request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.distance is None:
        self.distance = 0
      if self.p is None:
        self.p = 0
      if self.d is None:
        self.d = 0
      if self.i is None:
        self.i = 0
      if self.target is None:
        self.target = 0
      if self.status is None:
        self.status = 0
    else:
      self.distance = 0
      self.p = 0
      self.d = 0
      self.i = 0
      self.target = 0
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_h3bhB.pack(_x.distance, _x.p, _x.d, _x.i, _x.target, _x.status))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.distance, _x.p, _x.d, _x.i, _x.target, _x.status,) = _struct_h3bhB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_h3bhB.pack(_x.distance, _x.p, _x.d, _x.i, _x.target, _x.status))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.distance, _x.p, _x.d, _x.i, _x.target, _x.status,) = _struct_h3bhB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h3bhB = struct.Struct("<h3bhB")
