/* Auto-generated by genmsg_cpp for file /root/ros_workspace/rxtxserver/msg/distance.msg */
#ifndef RXTXSERVER_MESSAGE_DISTANCE_H
#define RXTXSERVER_MESSAGE_DISTANCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rxtxserver
{
template <class ContainerAllocator>
struct distance_ {
  typedef distance_<ContainerAllocator> Type;

  distance_()
  : vertical(0)
  {
  }

  distance_(const ContainerAllocator& _alloc)
  : vertical(0)
  {
  }

  typedef uint16_t _vertical_type;
  uint16_t vertical;


  typedef boost::shared_ptr< ::rxtxserver::distance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rxtxserver::distance_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct distance
typedef  ::rxtxserver::distance_<std::allocator<void> > distance;

typedef boost::shared_ptr< ::rxtxserver::distance> distancePtr;
typedef boost::shared_ptr< ::rxtxserver::distance const> distanceConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rxtxserver::distance_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rxtxserver::distance_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rxtxserver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rxtxserver::distance_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rxtxserver::distance_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rxtxserver::distance_<ContainerAllocator> > {
  static const char* value() 
  {
    return "64bd46181ebfcf44c3f5a7c010852540";
  }

  static const char* value(const  ::rxtxserver::distance_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x64bd46181ebfcf44ULL;
  static const uint64_t static_value2 = 0xc3f5a7c010852540ULL;
};

template<class ContainerAllocator>
struct DataType< ::rxtxserver::distance_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rxtxserver/distance";
  }

  static const char* value(const  ::rxtxserver::distance_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rxtxserver::distance_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 vertical\n\
\n\
";
  }

  static const char* value(const  ::rxtxserver::distance_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rxtxserver::distance_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rxtxserver::distance_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.vertical);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct distance_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rxtxserver::distance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rxtxserver::distance_<ContainerAllocator> & v) 
  {
    s << indent << "vertical: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vertical);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RXTXSERVER_MESSAGE_DISTANCE_H

