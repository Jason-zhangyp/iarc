/* Auto-generated by genmsg_cpp for file /root/ros_workspace/rxtxserver/msg/AngularPos.msg */
#ifndef RXTXSERVER_MESSAGE_ANGULARPOS_H
#define RXTXSERVER_MESSAGE_ANGULARPOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rxtxserver
{
template <class ContainerAllocator>
struct AngularPos_ {
  typedef AngularPos_<ContainerAllocator> Type;

  AngularPos_()
  : x(0)
  , y(0)
  , z(0)
  {
  }

  AngularPos_(const ContainerAllocator& _alloc)
  : x(0)
  , y(0)
  , z(0)
  {
  }

  typedef int16_t _x_type;
  int16_t x;

  typedef int16_t _y_type;
  int16_t y;

  typedef int16_t _z_type;
  int16_t z;


  typedef boost::shared_ptr< ::rxtxserver::AngularPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rxtxserver::AngularPos_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AngularPos
typedef  ::rxtxserver::AngularPos_<std::allocator<void> > AngularPos;

typedef boost::shared_ptr< ::rxtxserver::AngularPos> AngularPosPtr;
typedef boost::shared_ptr< ::rxtxserver::AngularPos const> AngularPosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rxtxserver::AngularPos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rxtxserver::AngularPos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rxtxserver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rxtxserver::AngularPos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rxtxserver::AngularPos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rxtxserver::AngularPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "85729383565f7e059d4a213b3db1317b";
  }

  static const char* value(const  ::rxtxserver::AngularPos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x85729383565f7e05ULL;
  static const uint64_t static_value2 = 0x9d4a213b3db1317bULL;
};

template<class ContainerAllocator>
struct DataType< ::rxtxserver::AngularPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rxtxserver/AngularPos";
  }

  static const char* value(const  ::rxtxserver::AngularPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rxtxserver::AngularPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 x\n\
int16 y\n\
int16 z\n\
\n\
";
  }

  static const char* value(const  ::rxtxserver::AngularPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rxtxserver::AngularPos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rxtxserver::AngularPos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AngularPos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rxtxserver::AngularPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rxtxserver::AngularPos_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.z);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RXTXSERVER_MESSAGE_ANGULARPOS_H

