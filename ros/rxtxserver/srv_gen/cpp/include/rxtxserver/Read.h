/* Auto-generated by genmsg_cpp for file /root/ros_workspace/rxtxserver/srv/Read.srv */
#ifndef RXTXSERVER_SERVICE_READ_H
#define RXTXSERVER_SERVICE_READ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rxtxserver
{
template <class ContainerAllocator>
struct ReadRequest_ {
  typedef ReadRequest_<ContainerAllocator> Type;

  ReadRequest_()
  {
  }

  ReadRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::rxtxserver::ReadRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rxtxserver::ReadRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ReadRequest
typedef  ::rxtxserver::ReadRequest_<std::allocator<void> > ReadRequest;

typedef boost::shared_ptr< ::rxtxserver::ReadRequest> ReadRequestPtr;
typedef boost::shared_ptr< ::rxtxserver::ReadRequest const> ReadRequestConstPtr;


template <class ContainerAllocator>
struct ReadResponse_ {
  typedef ReadResponse_<ContainerAllocator> Type;

  ReadResponse_()
  : outData(0)
  {
  }

  ReadResponse_(const ContainerAllocator& _alloc)
  : outData(0)
  {
  }

  typedef int8_t _outData_type;
  int8_t outData;


  typedef boost::shared_ptr< ::rxtxserver::ReadResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rxtxserver::ReadResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ReadResponse
typedef  ::rxtxserver::ReadResponse_<std::allocator<void> > ReadResponse;

typedef boost::shared_ptr< ::rxtxserver::ReadResponse> ReadResponsePtr;
typedef boost::shared_ptr< ::rxtxserver::ReadResponse const> ReadResponseConstPtr;

struct Read
{

typedef ReadRequest Request;
typedef ReadResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Read
} // namespace rxtxserver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rxtxserver::ReadRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rxtxserver::ReadRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rxtxserver::ReadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::rxtxserver::ReadRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::rxtxserver::ReadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rxtxserver/ReadRequest";
  }

  static const char* value(const  ::rxtxserver::ReadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rxtxserver::ReadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::rxtxserver::ReadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rxtxserver::ReadRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rxtxserver::ReadResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rxtxserver::ReadResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rxtxserver::ReadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "10545a036ebd67aa10ae2e15db0715dd";
  }

  static const char* value(const  ::rxtxserver::ReadResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x10545a036ebd67aaULL;
  static const uint64_t static_value2 = 0x10ae2e15db0715ddULL;
};

template<class ContainerAllocator>
struct DataType< ::rxtxserver::ReadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rxtxserver/ReadResponse";
  }

  static const char* value(const  ::rxtxserver::ReadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rxtxserver::ReadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "byte outData\n\
\n\
\n\
";
  }

  static const char* value(const  ::rxtxserver::ReadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rxtxserver::ReadResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rxtxserver::ReadRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReadRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rxtxserver::ReadResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.outData);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReadResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rxtxserver::Read> {
  static const char* value() 
  {
    return "10545a036ebd67aa10ae2e15db0715dd";
  }

  static const char* value(const rxtxserver::Read&) { return value(); } 
};

template<>
struct DataType<rxtxserver::Read> {
  static const char* value() 
  {
    return "rxtxserver/Read";
  }

  static const char* value(const rxtxserver::Read&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rxtxserver::ReadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "10545a036ebd67aa10ae2e15db0715dd";
  }

  static const char* value(const rxtxserver::ReadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rxtxserver::ReadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rxtxserver/Read";
  }

  static const char* value(const rxtxserver::ReadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rxtxserver::ReadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "10545a036ebd67aa10ae2e15db0715dd";
  }

  static const char* value(const rxtxserver::ReadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rxtxserver::ReadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rxtxserver/Read";
  }

  static const char* value(const rxtxserver::ReadResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RXTXSERVER_SERVICE_READ_H

